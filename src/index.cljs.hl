(page "index.html"
; (:require [tailrecursion.hoplon.reload :refer [reload-all]])
  (:require-macros [hoopsie.macros :as macros]))

;; Development
;; (reload-all)

(def name-map (macros/read-config))

(defn rnd [m k]
  (rand-nth (get m k)))

(defn rand-name []
  (let [fname (rnd name-map :first)
        lname (rnd name-map :last)] (str fname " " lname)))

(defc hooper-name (rand-name))

(defn stylesheet-link [path]
  (link :rel "stylesheet" :type "text/css" :href path))

(defn link-to [url title]
  (a :href url title))

(def created-by
  (let [me (link-to "https://www.github.com/devn" "Devin Walters")
        hoplon (link-to "http://hoplon.io/" "Hoplon")]
    (p "Created by " me " using " hoplon)))

(html
 (head
  (stylesheet-link "css/bootstrap.css")
  (stylesheet-link "css/main.css")
  (title "Hooper Name Generator"))
 (body
  (div :class "col-xs-6 center"
   (p :class "center-block"
    (h1 :class "hooper-name" (text "~{hooper-name}"))
    (button :class "btn btn-primary btn-lg btn-block"
            :on-click #(reset! hooper-name (rand-name))
            (text "Generate Hooper Name")))
   (footer :class "center-block footer"
     (p created-by)))))
